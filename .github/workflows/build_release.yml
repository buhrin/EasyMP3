# .github/workflows/build_release.yml
name: Build and Release EasyMP3

on:
  push:
    branches: [ main ] # Trigger on pushes to the main branch

permissions: write-all # Needed to create releases and upload assets

jobs:
  build:
    runs-on: windows-latest # Use a Windows runner since we need .exe

    steps:
    - name: Check out repository code
      uses: actions/checkout@v4 # Action to get your code
      with:
        fetch-depth: 0 # Fetch all history for all tags and branches

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x' # Use a recent Python 3 version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install pyperclip sv-ttk # Added dependencies for clipboard and theme

    - name: Determine version
      id: version # Give the step an ID to reference its outputs
      run: |
        # Read MAJOR.MINOR from the VERSION file
        # Trim whitespace just in case
        major_minor=$(tr -d '[:space:]' < VERSION)
        echo "Read MAJOR.MINOR from VERSION file: $major_minor"

        # Find the latest tag for the current MAJOR.MINOR version
        latest_tag=$(git tag --list "v${major_minor}.*" --sort=-v:refname | head -n 1)

        if [ -z "$latest_tag" ]; then
          # No existing tag for this MAJOR.MINOR, start patch at 0
          patch_version=0
          echo "No previous tag found for v${major_minor}. Starting patch version at 0."
        else
          # Existing tag found, increment patch version
          # Extract patch number: vX.Y.Z -> Z
          last_patch=$(echo "$latest_tag" | sed 's/.*\.//')
          patch_version=$((last_patch + 1))
          echo "Found latest tag ${latest_tag}. Incrementing patch version to ${patch_version}."
        fi

        # Construct the new tag (vMAJOR.MINOR.PATCH)
        new_tag="v${major_minor}.${patch_version}"
        echo "Calculated New Tag: $new_tag"

        # Set the new tag as an output variable for subsequent steps
        echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
      shell: bash # Use bash for easier string manipulation

    - name: Build executable with PyInstaller
      run: |
        pyinstaller --onefile --windowed --name EasyMP3 --icon=src/assets/icon.ico --add-data "bin;bin" --add-data "src/assets;assets" src/main.py

    - name: Create Release and Upload Asset
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.new_tag }} # Use the calculated tag from the previous step
        name: EasyMP3 ${{ steps.version.outputs.new_tag }} # Use the calculated tag in the release name
        body: |
          Automated build of EasyMP3 ${{ steps.version.outputs.new_tag }}.
          Based on commit ${{ github.sha }}.
          Download the EasyMP3.exe file below.
        files: dist/EasyMP3.exe # Path to the built executable to upload
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Provided by GitHub Actions